// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id         String   @id @default(uuid())
  name       String   @unique
  region_id  String
  region     Region   @relation(name: "regionSchools", fields: [region_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  teachers_workplaces TeacherWorkplace[] @relation(name: "SchoolWorkplace")

  @@map("school")
}

model Region {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  schools    School[] @relation(name: "regionSchools")

  @@map("region")
}

model ChoiceQuestion {
  id             String         @id @default(uuid())
  text           String
  description    String?
  correct_choice String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  answers        ChoiceAnswer[] @relation(name: "QuestionAnswer")

  @@map("choice_question")
}

model ChoiceAnswer {
  id         String         @id @default(uuid())
  questionId String
  question   ChoiceQuestion @relation(name: "QuestionAnswer", fields: [questionId], references: [id])
  key        String
  value      String

  choice_answer_applys ChoiceAnswerApply[] @relation(name: "ChoiceAnswerApply")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("choice_answer")
}

model ChoiceAnswerApply {
  id         String       @id @default(uuid())
  teacherId  String
  teacher    Teacher      @relation(name: "TeacherApply", fields: [teacherId], references: [id])
  answerId   String
  answer     ChoiceAnswer @relation(name: "ChoiceAnswerApply", fields: [answerId], references: [id])
  key        String
  is_correct Boolean?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("choice_answer_apply")
}

model WriteQuestion {
  id             String  @id @default(uuid())
  text           String
  correct_answer String
  is_active      Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  question_applys WriteQuestionApply[] @relation(name: "WriteQuestion")

  @@map("write_question")
}

model WriteQuestionApply {
  id         String        @id @default(uuid())
  questionId String
  question   WriteQuestion @relation(name: "WriteQuestion", fields: [questionId], references: [id])
  teacherId  String
  teacher    Teacher       @relation(name: "WriteQuestionApply", fields: [teacherId], references: [id])

  value      String
  is_correct Boolean? @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("write_question_apply")
}

model Training {
  id          String   @id @default(uuid())
  title       String
  description String?
  subject     String?
  max_score   Int?
  pass_score  Int?
  file        String?
  is_active   Boolean? @default(true)

  training_applys TrainingApply[] @relation(name: "TrainingApply")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("training")
}

model TrainingApply {
  id              String               @id @default(uuid())
  trainingId      String
  train           Training             @relation(name: "TrainingApply", fields: [trainingId], references: [id])
  teacherId       String
  teacher         Teacher              @relation(name: "TrainingTeacher", fields: [teacherId], references: [id])
  text            String?
  file            String?
  is_seen         Boolean?             @default(false)
  checking_applys CheckTrainingApply[] @relation(name: "CheckTrainingApply")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("training_apply")
}

model CheckTrainingApply {
  id               String        @id @default(uuid())
  training_applyId String
  training_apply   TrainingApply @relation(name: "CheckTrainingApply", fields: [training_applyId], references: [id])
  description      String?
  score            Int           @default(0)
  is_active        Boolean?      @default(false)
  is_seen          Boolean?      @default(false)
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@map("check_training_apply")
}

// TEACHER 
model Teacher {
  id                   String   @id @default(uuid())
  first_name           String
  last_name            String
  email                String   @unique
  username             String   @unique
  hashed_password      String
  hashed_refresh_token String?
  activation_link      String?  @unique
  is_active            Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  teacher_training_applys TrainingApply[]       @relation(name: "TrainingTeacher")
  write_question_applys   WriteQuestionApply[]  @relation(name: "WriteQuestionApply")
  choice_answer_applys    ChoiceAnswerApply[]   @relation(name: "TeacherApply")
  teacher_personal_info   TeacherPersonalInfo[] @relation(name: "TeacherPersonalInfo")
  teacher_workplace       TeacherWorkplace[]    @relation(name: "TeacherWorkplace")

  @@map("teacher")
}

model TeacherPersonalInfo {
  id              String  @id @default(uuid())
  teacherId       String
  teacher         Teacher @relation(name: "TeacherPersonalInfo", fields: [teacherId], references: [id])
  nationality     String?
  gender          String?
  birthDate       String?
  passport_serial String?
  is_active       Boolean @default(true)
  photo           String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("teacher_personal_info")
}

model TeacherWorkplace {
  id         String   @id @default(uuid())
  position   String
  teacherId  String
  schoolId   String
  teacher    Teacher  @relation(name: "TeacherWorkplace", fields: [teacherId], references: [id])
  school     School   @relation(name: "SchoolWorkplace", fields: [schoolId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("teacher_workplace")
}

model Admin {
  id                   String   @id @default(uuid())
  first_name           String
  last_name            String
  email                String   @unique
  username             String   @unique
  hashed_password      String
  hashed_refresh_token String?
  activation_link      String?  @unique
  is_active            Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("admin")
}
