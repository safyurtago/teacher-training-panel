
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.5.2
 * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
 */
Prisma.prismaVersion = {
  client: "5.5.2",
  engine: "aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  region_id: 'region_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChoiceQuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  description: 'description',
  correct_choice: 'correct_choice',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChoiceAnswerScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  key: 'key',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChoiceAnswerApplyScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  answerId: 'answerId',
  key: 'key',
  is_correct: 'is_correct',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WriteQuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  correct_answer: 'correct_answer',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WriteQuestionApplyScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  teacherId: 'teacherId',
  value: 'value',
  is_correct: 'is_correct',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  subject: 'subject',
  max_score: 'max_score',
  pass_score: 'pass_score',
  file: 'file',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TrainingApplyScalarFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  teacherId: 'teacherId',
  text: 'text',
  file: 'file',
  is_seen: 'is_seen',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CheckTrainingApplyScalarFieldEnum = {
  id: 'id',
  training_applyId: 'training_applyId',
  description: 'description',
  score: 'score',
  is_active: 'is_active',
  is_seen: 'is_seen',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  file: 'file',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  file: 'file',
  score: 'score',
  is_active: 'is_active',
  lessonId: 'lessonId',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TaskCriteriaScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  taskId: 'taskId',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TaskApplyScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  taskId: 'taskId',
  overall_score: 'overall_score',
  description: 'description',
  file: 'file',
  is_active: 'is_active',
  is_seen: 'is_seen',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CheckWithTaskCriteriasScalarFieldEnum = {
  id: 'id',
  task_applyId: 'task_applyId',
  task_criteriaId: 'task_criteriaId',
  criteria_score: 'criteria_score',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  username: 'username',
  hashed_password: 'hashed_password',
  hashed_refresh_token: 'hashed_refresh_token',
  activation_link: 'activation_link',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TeacherPersonalInfoScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  nationality: 'nationality',
  gender: 'gender',
  birthDate: 'birthDate',
  passport_serial: 'passport_serial',
  is_active: 'is_active',
  photo: 'photo',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TeacherWorkplaceScalarFieldEnum = {
  id: 'id',
  position: 'position',
  teacherId: 'teacherId',
  schoolId: 'schoolId',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  username: 'username',
  hashed_password: 'hashed_password',
  hashed_refresh_token: 'hashed_refresh_token',
  activation_link: 'activation_link',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  School: 'School',
  Region: 'Region',
  ChoiceQuestion: 'ChoiceQuestion',
  ChoiceAnswer: 'ChoiceAnswer',
  ChoiceAnswerApply: 'ChoiceAnswerApply',
  WriteQuestion: 'WriteQuestion',
  WriteQuestionApply: 'WriteQuestionApply',
  Training: 'Training',
  TrainingApply: 'TrainingApply',
  CheckTrainingApply: 'CheckTrainingApply',
  Lesson: 'Lesson',
  Task: 'Task',
  TaskCriteria: 'TaskCriteria',
  TaskApply: 'TaskApply',
  CheckWithTaskCriterias: 'CheckWithTaskCriterias',
  Teacher: 'Teacher',
  TeacherPersonalInfo: 'TeacherPersonalInfo',
  TeacherWorkplace: 'TeacherWorkplace',
  Admin: 'Admin'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
